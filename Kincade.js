{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-1-339830a8735d>, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-1-339830a8735d>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    var SmoothedAffectedAreas = {\"opacity\":1,\"bands\":[\"constant\"],\"gamma\":1},\u001b[0m\n\u001b[0m        ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "var SmoothedAffectedAreas = {\"opacity\":1,\"bands\":[\"constant\"],\"gamma\":1},\n",
    "    AffectedAreas = {\"opacity\":1,\"bands\":[\"constant\"],\"palette\":[\"800080\"]},\n",
    "    HighConfidence = {\"opacity\":0.3,\"bands\":[\"remapped_max_min_mean\"],\"palette\":[\"ffffff\",\"ffff00\",\"ffa500\",\"ff0000\",\"800080\"]},\n",
    "    SmoothedConfidence = {\"opacity\":0.3,\"bands\":[\"remapped_max_min_mean\"],\"palette\":[\"ffffff\",\"ffff00\",\"ffa500\",\"ff0000\",\"800080\"]},\n",
    "    GOES17MaximumConfidence = {\"opacity\":0.3,\"bands\":[\"remapped_max\"],\"palette\":[\"ffffff\",\"ffff00\",\"ffa500\",\"ff0000\",\"800080\"]},\n",
    "    GOES16MaximumConfidence = {\"opacity\":0.3,\"bands\":[\"remapped_max\"],\"palette\":[\"ffffff\",\"ffff00\",\"ffa500\",\"ff0000\",\"800080\"]},\n",
    "    inside_pt = /* color: #bf04c2 */ee.Geometry.Point([-122.75330719414443, 38.69252294968745]),\n",
    "    inside_interest_radius = /* color: #ff0000 */ee.Geometry.Point([-122.95323484571156, 38.66114499877616]),\n",
    "    outside_radius = /* color: #00ff00 */ee.Geometry.Point([-123.16197508008656, 38.74902289276896]),\n",
    "    close_to_boundary = /* color: #0000ff */ee.Geometry.Point([-122.86042389336318, 38.79748907672683]);"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "ename": "SyntaxError",
     "evalue": "invalid syntax (<ipython-input-2-71ec4b767b8f>, line 1)",
     "output_type": "error",
     "traceback": [
      "\u001b[0;36m  File \u001b[0;32m\"<ipython-input-2-71ec4b767b8f>\"\u001b[0;36m, line \u001b[0;32m1\u001b[0m\n\u001b[0;31m    //Section 1 - Filter image\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mSyntaxError\u001b[0m\u001b[0;31m:\u001b[0m invalid syntax\n"
     ]
    }
   ],
   "source": [
    "//Section 1 - Filter image\n",
    "// Time and location of the fire.\n",
    "var kincade = {\n",
    "longitude: -122.8,\n",
    "latitude: 38.7,\n",
    "start: '2019-10-23',\n",
    "end: '2019-11-06',\n",
    "};\n",
    "\n",
    "var show = false;\n",
    "\n",
    "// Region of interest.\n",
    "var radius_of_interest_meters = 25000;\n",
    "var area_of_interest = ee.Geometry.Point([kincade.longitude, kincade.latitude])\n",
    ".buffer(radius_of_interest_meters);\n",
    "// Satellite data.\n",
    "var goes_16_data = ee.ImageCollection('NOAA/GOES/16/FDCF')\n",
    ".filterDate(kincade.start, kincade.end)\n",
    ".filterBounds(area_of_interest);\n",
    "var goes_17_data = ee.ImageCollection('NOAA/GOES/17/FDCF')\n",
    ".filterDate(kincade.start, kincade.end)\n",
    ".filterBounds(area_of_interest);\n",
    "\n",
    "//Section 2 - \n",
    "// Conversion from mask codes to confidence values.\n",
    "var fire_mask_codes = [10, 30, 11, 31, 12, 32, 13, 33, 14, 34, 15, 35];\n",
    "var confidence_values = [1.0, 1.0, 0.9, 0.9, 0.8, 0.8, 0.5, 0.5, 0.3, 0.3, 0.1, 0.1];\n",
    "var default_confidence_value = 0;\n",
    "var map_from_mask_codes_to_confidence_values = function(image) {\n",
    "return image\n",
    ".clip(area_of_interest)\n",
    ".remap(fire_mask_codes, confidence_values, default_confidence_value);\n",
    "};\n",
    "var goes_16_confidence = goes_16_data\n",
    ".select(['Mask'])\n",
    ".map(map_from_mask_codes_to_confidence_values);\n",
    "var goes_17_confidence = goes_17_data\n",
    ".select(['Mask'])\n",
    ".map(map_from_mask_codes_to_confidence_values);\n",
    "\n",
    "//S3\n",
    "var goes_16_max_confidence = goes_16_confidence\n",
    ".reduce(ee.Reducer.max());\n",
    "var goes_17_max_confidence = goes_17_confidence\n",
    ".reduce(ee.Reducer.max());\n",
    "\n",
    "//S4\n",
    "var affected_area_palette = ['white', 'yellow', 'orange', 'red', 'purple'];\n",
    "Map.centerObject(area_of_interest, 9);\n",
    "Map.addLayer(area_of_interest,\n",
    "{color: 'green'},\n",
    "'Area of interest', show, 0.2);\n",
    "Map.addLayer(goes_16_max_confidence,\n",
    "{opacity: 0.3, min: 0, max: 1, palette: affected_area_palette},\n",
    "'GOES 16 maximum confidence', show);\n",
    "Map.addLayer(goes_17_max_confidence,\n",
    "{opacity: 0.3, min: 0, max: 1, palette: affected_area_palette},\n",
    "'GOES 17 maximum confidence', show);\n",
    "\n",
    "//S5\n",
    "var combined_confidence = ee.ImageCollection([goes_16_max_confidence,\n",
    "goes_17_max_confidence])\n",
    ".reduce(ee.Reducer.min());\n",
    "Map.addLayer(combined_confidence,\n",
    "{opacity: 0.3, min: 0, max: 1, palette: affected_area_palette},\n",
    "'Combined confidence', show);\n",
    "\n",
    "//S6 - smoothing pixels (seems to be where it ends)\n",
    "var kernel = ee.Kernel.square(2000, 'meters', true);\n",
    "var smoothed_confidence = combined_confidence\n",
    ".reduceNeighborhood({'reducer':ee.Reducer.mean(),\n",
    "'kernel': kernel,\n",
    "'optimization': 'boxcar',});\n",
    "Map.addLayer(smoothed_confidence,\n",
    "{opacity: 0.3, min: 0, max: 1, palette: affected_area_palette},\n",
    "'Smoothed confidence', show);\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "//S7 - converting to an outline\n",
    "var high_confidence = smoothed_confidence\n",
    ".gt(0.6);\n",
    "Map.addLayer(high_confidence,\n",
    "{opacity: 0.3, min: 0, max: 1, palette: affected_area_palette},\n",
    "'High confidence', show);\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "//S8 - Outline of area\n",
    "var affected_areas = high_confidence\n",
    ".reduceToVectors({scale: 200,  // 200 m/pixel\n",
    "maxPixels: 1e10,\n",
    "geometry: area_of_interest})\n",
    ".filter(ee.Filter.eq('label', 1));\n",
    "var affected_areas_outline = ee.Image().byte()\n",
    ".paint({featureCollection: affected_areas,\n",
    "width: 2});\n",
    "Map.addLayer(affected_areas_outline,\n",
    "{palette: 'purple'},\n",
    "'Affected areas', show, 0.3);\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "//S9\n",
    "var smooth = function(feature) {\n",
    "var max_error_meters = 500;\n",
    "return ee.Feature(feature).simplify(max_error_meters);};\n",
    "var affected_areas_smoothed = ee.FeatureCollection(affected_areas)\n",
    ".map(smooth);\n",
    "var affected_areas_smoothed_outline = ee.Image().byte()\n",
    ".paint({featureCollection: affected_areas_smoothed,\n",
    "width: 2});\n",
    "Map.addLayer(affected_areas_smoothed_outline,\n",
    "{palette: 'purple'},\n",
    "'Smoothed affected areas', show, 0.3);\n",
    "\n",
    "\n",
    "\n",
    "//test if imported points are contained in affected area\n",
    "var fire_boundary = affected_areas_smoothed.geometry();\n",
    "print(\"fire boundary contains purple point is\");\n",
    "print(fire_boundary.contains(inside_pt));\n",
    "print(\"fire boundary contains red point is\");\n",
    "print(fire_boundary.contains(inside_interest_radius));\n",
    "print(\"fire boundary contains green point is\");\n",
    "print(fire_boundary.contains(outside_radius));\n",
    "print(\"how close in metres is the blue point\");\n",
    "print(fire_boundary.distance(close_to_boundary, 10));\n",
    "print(\"is the blue point less than 1km from the fire\");\n",
    "print(fire_boundary.withinDistance(close_to_boundary, 1000, 10));\n",
    "// var smth = affected_areas_smoothed_outline.reduceToVectors(\n",
    "//   {scale: 200, maxPixels: 1e10, geometry: area_of_interest, geometryType: 'polygon'}\n",
    "//   );\n",
    "// var smth_geometry = smth.geometry();\n",
    "// print(smth_geometry);\n",
    "// print(smth_geometry.contains(inside_pt));\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
